---
title: Cracking open ggplot internals with `{ggtrace}`
author: |
  <p class="author" style="font-size: 1.1em; margin-top:60px">
    June Choe
  </p>
  <p style="font-size:.9em">
    University of Pennsylvania
  </p>
  <p style="font-size:.8em">
    <a href='https://twitter.com/yjunechoe'>@yjunechoe</a>
  </p>
format:
  revealjs:
    # include-in-header: "meta.html"
    include-after-body: "postprocessing.html"
    # logo: "img/userlogo.png"
    # footer: "https://yjunechoe.github.io/ggtrace-user2022"
    theme: [default, style.scss]
    code-line-numbers: false
    slide-number: true
    execute:
      echo: true
    knitr:
      opts_chunk: 
        R.options:
          width: 70
        class-source: "big-code-chunk"
        class-output: "big-chunk-output"
        dev: "svglite"
        dev.args:
          scaling: 1.5
---

## {visibility="hidden"}

```{r setup}
#| include: false
library(ggtrace)        # v0.5.1
library(ggplot2)        # v3.3.6
library(dplyr)          # v1.0.9
library(grid)           # v4.2.0
library(palmerpenguins) # v0.1.0
library(htmltools)      # v0.5.2
theme_set(theme_classic(base_size = 14))
```

```{r generate-experiment-data}
#| echo: false
set.seed(2022)
experiment_data <- tidyr::crossing(
  subject = 1:60,
  trial = 1:24,
  condition = c("A", "B")
) %>% 
  arrange(condition) %>% 
  mutate(response_time = round(
    c(
      runif(n()/2, 1982, 3111),
      scales::oob_squish(abs(rnorm(n()/2, 2000, 500)), c(1221, 3012))
    )
  )) %>% 
  mutate(response_time = replace(response_time, sample(which(condition == "B"), 3), c(3590, 3712, 3963))) %>% 
  arrange(subject) %>% 
  slice(-n())
options("pillar.print_min" = 3)
```

---

::: {.vcenter}

<div>
```{r experiment-data}
experiment_data
```

```{r shorten-df}
#| echo: false
experiment_data <- as.data.frame(experiment_data)
```
</div>

<div class="divbr"></div>

<div class="fragment">
```{r my_boxplot}
my_boxplot <- ggplot(experiment_data) +
  geom_boxplot(
    aes(x = condition, y = response_time, fill = condition)
  )
```
</div>

:::

## {.nostretch}

```{r my_boxplot-lone}
my_boxplot
``` 

## {.nostretch}

::: {.vcenter}

```{r my_boxplot-arrow}
#| echo: false
#| fig-align: "center"
my_boxplot + 
  geom_segment(
    aes(x = condition,
        xend = after_stat(x + .2),
        y = stage(response_time, unlist(outliers)),
        yend = after_stat(unlist(outliers))),
    position = position_nudge(x = .05),
    arrow = arrow(ends = "first", length = unit(.3, "cm")),
    color = "#941414", size = 1,
    stat = "boxplot",
    data = ~ .x %>% filter(condition == "B")
  )
```

:::

## {.nostretch}

::: {.vcenter}
```{r my_boxplot-labelled}
#| echo: false
#| fig-align: "center"
my_boxplot + 
  geom_label(
    aes(x = condition,
        y = stage(start = response_time, after_stat = ymax),
        label = after_stat(ymax)),
    stat = "boxplot", size = 5,
    data = ~ .x %>% filter(condition == "B")
  )
```
:::


## {.nostretch}

<div class="absolute" style="height: 5px; width: 22%; left: 230px; top: calc(20% + 50px); background-color: black"></div>

<div class="absolute internal-step" style="background-color:white; width:280px; left: -50px; top:20%;"><code>+ layer( ... )</code></div>

<div class="absolute" style="height: 5px; width: 18%; left: calc(15% + 300px); top: calc(20% + 50px); background-color: black"></div>

::: {.absolute style="right: 0px; top: 10%; border: 2px solid black;"}
```{r boxplot-grob}
#| echo: false
#| out-width: "400px"
#| fig-align: "center"
boxplot_grob <- ggtrace_inspect_return(
  my_boxplot, Geom$draw_layer
)[[1]]
grid.newpage()
pushViewport(viewport())
grid.draw(boxplot_grob)
```
:::

## {.nostretch}

<div class="absolute" style="height: 5px; width: 22%; left: 230px; top: calc(20% + 50px); background-color: black"></div>

<div class="absolute internal-step" style="background-color:white; width:280px; left: -50px; top:20%;"><code>+ layer( ... )</code></div>

:::: {style="opacity: 0.3;"}

<div class="absolute" style="height: 5px; width: 18%; left: calc(15% + 300px); top: calc(20% + 50px); background-color: black"></div>

::: {.absolute style="right: 0px; top: 10%; border: 2px solid black;"}
```{r boxplot-grob}
#| echo: false
#| out-width: "400px"
#| fig-align: "center"
```
:::

::::

<div class="absolute" style="height: calc(35% - 50px); width: 5px; left: calc(15% + 300px); top: calc(20% + 50px); background-color: black"></div>

::: {.absolute style="left: 25%; top: 55%; border: 2px solid black;"}
```{r label-grob}
#| echo: false
#| out-width: "400px"
#| fig-align: "center"
label_grob <- ggtrace_inspect_return(
  my_boxplot + 
    geom_label(
      aes(x = condition,
          y = stage(start = response_time, after_stat = ymax),
          label = after_stat(ymax)),
      stat = "boxplot", size = 5,
      data = ~ .x %>% filter(condition == "B")
    )
  , Geom$draw_layer, cond = 2
)[[1]]
grid.newpage()
pushViewport(viewport())
grid.draw(label_grob)
```
:::

## {.nostretch}

```{r my_boxplot-labelled}
#| fig-align: "center"
```

---

:::{.vcenter}

```{r layer1}
#| eval: false
geom_boxplot(
  aes(x = condition, y = response_time, fill = condition)
)
```

```{r layer2}
#| eval: false
geom_label(
  aes(x = condition,
      y = stage(start = response_time, after_stat = ymax),
      label = after_stat(ymax)),
  stat = "boxplot", size = 5,
  data = . %>% filter(condition == "B")
)
```

:::

---

:::{.vcenter}

```{r layer1}
#| eval: false
```

<div style='opacity: .3;'>
```{r layer2}
#| eval: false
```
</div>

:::

---

:::{.vcenter}

<div style='opacity: .3;'>
```{r layer1}
#| eval: false
```
</div>

```{r layer2}
#| eval: false
```

:::

::: {.aside}
Note: `stage()` and `after_stat()` were added in `{ggplot2} v3.3.0` (March 2020)
:::

---

:::{.vcenter}

<div style='opacity: .3;'>
```{r layer1}
#| eval: false
```
</div>

```{r layer2}
#| eval: false
#| attr-source: 'data-hl-loc="[[7.2,1,20]]"'
```

:::

::: {.aside}
Note: `stage()` and `after_stat()` were added in `{ggplot2} v3.3.0` (March 2020)
:::

---

:::{.vcenter}

<div style='opacity: .3;'>
```{r layer1}
#| eval: false
```
</div>

```{r layer2}
#| eval: false
#| attr-source: 'data-hl-loc="[[1.45,3.2,7.1],[2.9,3.2,16.7],[2.9,29.9,0.5]]"'
```

:::

::: {.aside}
Note: `stage()` and `after_stat()` were added in `{ggplot2} v3.3.0` (March 2020)
:::

---

:::{.vcenter}

<div style='opacity: .3;'>
```{r layer1}
#| eval: false
```
</div>

```{r layer2}
#| eval: false
#| attr-source: 'data-hl-loc="[[5.8,1,8.8]]"'
```

:::

::: {.aside}
Note: `stage()` and `after_stat()` were added in `{ggplot2} v3.3.0` (March 2020)
:::

---

:::{.vcenter}

<div style='opacity: .3;'>
```{r layer1}
#| eval: false
```
</div>

```{r layer2}
#| eval: false
#| attr-source: 'data-hl-loc="[[2.9,3.1,5.5],[2.9,20.5,10],[4.3,3.1,13]]"'
```

:::

::: {.aside}
Note: `stage()` and `after_stat()` were added in `{ggplot2} v3.3.0` (March 2020)
:::

---

:::{.vcenter}

<div style='opacity: .3;'>
```{r layer1}
#| eval: false
```
</div>

```{r layer2}
#| eval: false
#| attr-source: 'data-hl-loc="[[0,0,5.6]]"'
```

:::

::: {.aside}
Note: `stage()` and `after_stat()` were added in `{ggplot2} v3.3.0` (March 2020)
:::

---

:::{.vcenter}

<div style='opacity: .3;'>
```{r layer1}
#| eval: false
```
</div>

```{r layer2}
#| eval: false
```

:::

::: {.aside}
Note: `stage()` and `after_stat()` were added in `{ggplot2} v3.3.0` (March 2020)
:::

## {background-color="#81388C"}

[ggplot internals _for users_]{.centered-slide-text}


## ggplot internals as data wrangling {.nostretch}

. . .

![](img/ggtrace_logo.png){.absolute width=450 right=-120}

. . .

:::: {.columns style="margin-top: 80px;"}

**Outline:**

::: {.column width="75%"}

1) Reframing of ggplot internals as a data wrangling pipeline

2) Walkthrough with a barplot example

3) Building up the boxplot annotation layer

:::

::::

## 1) Layers as dataframes

. . .

```{r layer_data-boxplot}
ggplot2::layer_data(plot = my_boxplot, i = 1L)
```

## Input

```{r experiment-data-show}
#| eval: false
experiment_data
```

```{r experiment-data-5row}
#| echo: false
experiment_data %>% print(max = ncol(.) * 5)
```

## Output

```{r layer_data-boxplot}
```

<!-- ## 2) Internals as data wrangling -->

<!-- ```{r pipeline-data-wrangling} -->
<!-- #| eval: false -->
<!-- ggplot_internals <- function(data) { -->
<!--   data %>%  -->
<!--     fun1() %>%  -->
<!--     fun2() %>%  -->
<!--     fun3() %>%  -->
<!--     fun4() %>%  -->
<!--     fun5() %>%  -->
<!--     fun6() %>%  -->
<!--     ... -->
<!-- } -->
<!-- ``` -->

---

:::{.vcenter}
<div>
<div style="display: flex; flex-direction: row; justify-content: space-around;"><span class="my-hl-1">Before Stat</span><span class="my-hl-2">After Stat</span><span class="my-hl-3">Before Geom</span><span class="my-hl-4">After Scale</span></div>
<div class="divbr"></div>
```{r layer2}
#| eval: false
#| attr-source: 'style="background-color:white" data-hl-loc="[[5.8,4.8,5,\"#FFB1C080\"],[7.2,4.8,19.3,\"#FFB1C080\"],[1.45,5.3,4,\"#FFB1C080\"],[2.9,8.6,11.9,\"#FFB1C080\"],[2.9,21,9.5,\"#E1C56380\"],[4.3,7.5,8.6,\"#E1C56380\"],[0,2.8,2.8,\"#64DF9180\"],[5.8,10.7,4.5,\"#E0B6FF80\"]]"'
```
</div>
:::

## Snapshots of layer data

**Input** (user-supplied data)

::: {style="margin-left: 50px;"}

1) [Before Stat]{.my-hl-1} [validates the layer's choice of `stat`]{.fragment}

2) [After Stat]{.my-hl-2} [context for `after_stat()` mappings]{.fragment}

3) [Before Geom]{.my-hl-3} [validates the layer's choice of `geom`]{.fragment}

4) [After Scale]{.my-hl-4} [context for `after_scale()` mappings]{.fragment}

:::

**Output** (drawing-ready data)


## ðŸ‘» ggproto methods ðŸ‘»

:::: {.columns}

::: {.column width="65%"}
```{r pipeline-ggproto-methods-blank}
#| eval: false
#| attr-source: "style='height:470px'"
ggplot_internals <- function(data) {
  data %>% 
    ... %>% 
    Layer$compute_statistic() %>% 
    ... %>% 
    Layer$compute_geom_1() %>% 
    ... %>% 
    Layer$compute_geom_2() %>% 
    ...
}
```
:::

```{r snapshot-blocks-init}
#| echo: false
#| results: "asis"
render_steps <- function(step) {
  self_colors <- c("#FFB1C0", "#E4CB73", "#64DF91", "#E0B6FF")[step]
  step_colors <- rep("#BFBFBF", 4)
  step_colors[step] <- self_colors
  div(class = "internal-steps-container", lapply(1:4, function(i) {
    div(class = "internal-step",
        style = css(backgroundColor = step_colors[i]),
        c("Before Stat", "After Stat", "Before Geom", "After Scale")[i])
  }))
}
render_steps_progress <- function(step) {
  self_colors <- c("#FFB1C0", "#E4CB73", "#64DF91", "#E0B6FF")[step]
  step_colors <- rep("#BFBFBF", 4)
  step_colors[step] <- self_colors
  div(
    class = c("absolute internal-steps-container"),
    style = css(
      display = "flex",
      flexDirection = "row",
      fontSize = "0.5em",
      width = "100%",
      height = "30px",
      bottom = "-41px"
    ),
    # div(style = css(position = "absolute", height = "5px", width = "100%",
    #                 backgroundColor = "lightgrey", `z-index` = -1))
    # ,
    lapply(1:4, function(i) {
      div(
        class = "internal-step",
        style = css(
          backgroundColor = step_colors[i],
          lineHeight = "30px",
          width = "200px",
          height = "30px"
        ),
        c("Before Stat", "After Stat", "Before Geom", "After Scale")[i]
      )
    })
  )
}
```

::: {.column width="35%"}
```{r snapshot-blocks-blank}
#| echo: false
#| results: "asis"
render_steps(0)
```
:::

::::

::: {.aside}
These ggproto methods are called in `ggplot2:::ggplot_build.ggplot()`
:::

## ðŸ‘» ggproto methods ðŸ‘»

:::: {.columns}

::: {.column width="65%"}
```{r pipeline-ggproto-methods-before-stat}
#| eval: false
#| attr-source: "style='height:470px' data-hl-loc='[[4.4,2,13.7,\"#FFB1C060\",0.25]]'"
ggplot_internals <- function(data) {
  data %>% 
    ... %>% 
    Layer$compute_statistic()
  
  
  
  
  
}
```
:::

::: {.column width="35%"}
```{r snapshot-blocks-before-stat}
#| echo: false
#| results: "asis"
render_steps(1)
```
:::

::::

::: {.aside}
These ggproto methods are called in `ggplot2:::ggplot_build.ggplot()`
:::

## ðŸ‘» ggproto methods ðŸ‘»

:::: {.columns}

::: {.column width="65%"}
```{r pipeline-ggproto-methods-after-stat}
#| eval: false
#| attr-source: "style='height:470px' data-hl-loc='[[4.4,2,13.7,\"#FFB1C060\",0.25],[5.05,2,13.7,\"#E4CB7360\",0.25]]'"
ggplot_internals <- function(data) {
  data %>% 
    ... %>% 
    Layer$compute_statistic() %>% 
    ...
  
  
  
  
}
```
:::

::: {.column width="35%"}
```{r snapshot-blocks-after-stat}
#| echo: false
#| results: "asis"
render_steps(1:2)
```
:::

::::

::: {.aside}
These ggproto methods are called in `ggplot2:::ggplot_build.ggplot()`
:::

## ðŸ‘» ggproto methods ðŸ‘»

:::: {.columns}

::: {.column width="65%"}
```{r pipeline-ggproto-methods-before-geom}
#| eval: false
#| attr-source: "style='height:470px' data-hl-loc='[[4.4,2,13.7,\"#FFB1C060\",0.25],[5.05,2,13.7,\"#E4CB7360\",0.25],[7.2,2,12,\"#64DF9160\"]]'"
ggplot_internals <- function(data) {
  data %>% 
    ... %>% 
    Layer$compute_statistic() %>% 
    ... %>% 
    Layer$compute_geom_1()
  
  
  
}
```
:::

::: {.column width="35%"}
```{r snapshot-blocks-before-geom}
#| echo: false
#| results: "asis"
render_steps(1:3)
```
:::

::::

::: {.aside}
These ggproto methods are called in `ggplot2:::ggplot_build.ggplot()`
:::

## ðŸ‘» ggproto methods ðŸ‘»

:::: {.columns}

::: {.column width="65%"}
```{r pipeline-ggproto-methods-after-scale}
#| eval: false
#| attr-source: "style='height:470px' data-hl-loc='[[4.4,2,13.7,\"#FFB1C060\",0.25],[5.05,2,13.7,\"#E4CB7360\",0.25],[7.2,2,12,\"#64DF9160\"],[10.1,2,12,\"#E0B6FF60\"]]'"
ggplot_internals <- function(data) {
  data %>% 
    ... %>% 
    Layer$compute_statistic() %>% 
    ... %>% 
    Layer$compute_geom_1() %>% 
    ... %>% 
    Layer$compute_geom_2() %>% 
    ...
}
```
:::

::: {.column width="35%"}
```{r snapshot-blocks-after-scale}
#| echo: false
#| results: "asis"
render_steps(1:4)
```
:::

::::

::: {.aside}
These ggproto methods are called in `ggplot2:::ggplot_build.ggplot()`
:::

## Introducing `{ggtrace}`

<p style="margin:30px 0px;">
Toolkit to **Inspect**, **Capture**, and **Highjack** the internals
</p>

## Introducing `{ggtrace}`

<p style="margin:30px 0px;">
Toolkit to **Inspect**, **Capture**, and **Highjack** the internals
</p>

Workflow functions `ggtrace_{action}_{value}()`:

<div style="margin-left:100px">

- `x`: The ggplot object
    
- `method`: The ggproto method
    
- `cond`: When to interact with the method

</div>

::: {.aside}
If `cond` is an integer *N*, targets the *N*th time `method` is called.
:::

---

## Introducing `{ggtrace}` {.nostretch}

<p style="margin:30px 0px;">
Toolkit to **Inspect**, **Capture**, and **Highjack** the internals
</p>

Workflow functions `ggtrace_{action}_{value}()`:

<div style="margin-left:100px">

```{r ggtrace-inspect-fns}
#| echo: false
#| out-width: "80%"
knitr::include_graphics("img/ggtrace-inspect-fns.png")
```

</div>

<p style="margin-top:20px">
"While rendering `x`, inspect `method` when `cond` is met."
</p>

## ðŸ‘» ggproto methods ðŸ‘»

:::: {.columns}

::: {.column width="65%"}
```{r pipeline-ggproto-methods-1}
#| eval: false
#| attr-source: "style='height:470px' data-hl-loc='[[4.4,2,13.7,\"#FFB1C060\",0.25]]'"
ggplot_internals <- function(data) {
  data %>% 
    ... %>% 
    Layer$compute_statistic() %>% 
    ... %>% 
    Layer$compute_geom_1() %>% 
    ... %>% 
    Layer$compute_geom_2() %>% 
    ...
}
```
:::

::: {.column width="35%"}
```{r snapshot-blocks-1}
#| echo: false
#| results: "asis"
render_steps(1)
```
:::

::::

::: {.aside}
These ggproto methods are called in `ggplot2:::ggplot_build.ggplot()`
:::

---

:::{.vcenter}

<div style="position: relative;">

```{r boxplot-inspect-before-stat}
#| eval: false
ggtrace::ggtrace_inspect_args(
  x = my_boxplot,
  method = ggplot2:::Layer$compute_statistic,
  cond = 1
)$data
```

```{r boxplot-inspect-before-stat-smalldf}
#| echo: false
ggtrace::ggtrace_inspect_args(
  x = my_boxplot,
  method = ggplot2:::Layer$compute_statistic,
  cond = 1
)$data %>% 
  print(max = ncol(.) * 3)
```

<div class="absolute internal-step" style="background-color:#FFB1C0; width:250px; right: 0px; top:0px;">Before Stat</div>

</div>

:::

::: {.aside}
Default value of `cond` is `1` - it can be omitted here
:::

---

## ðŸ‘» ggproto methods ðŸ‘»

:::: {.columns}

::: {.column width="65%"}
```{r pipeline-ggproto-methods-2}
#| eval: false
#| attr-source: "style='height:470px' data-hl-loc='[[5.05,2,13.7,\"#E4CB7360\",0.25]]'"
ggplot_internals <- function(data) {
  data %>% 
    ... %>% 
    Layer$compute_statistic() %>% 
    ... %>% 
    Layer$compute_geom_1() %>% 
    ... %>% 
    Layer$compute_geom_2() %>% 
    ...
}
```
:::

::: {.column width="35%"}
```{r snapshot-blocks-2}
#| echo: false
#| results: "asis"
render_steps(2)
```
:::

::::

::: {.aside}
These ggproto methods are called in `ggplot2:::ggplot_build.ggplot()`
:::

---

:::{.vcenter}

<div style="position: relative;">

```{r boxplot-inspect-after-stat}
ggtrace::ggtrace_inspect_return(
  x = my_boxplot,
  method = ggplot2:::Layer$compute_statistic,
  cond = 1
)
```

<div class="absolute internal-step" style="background-color:#E4CB73; width:250px; right: 0px; top:0px;">After Stat</div>

</div>

:::

::: {.aside}
Default value of `cond` is `1` - it can be omitted here
:::

## ggplot internals for users {.nostretch}

![](img/ggtrace_logo.png){.absolute width=450 right=-120}

:::: {.columns style="margin-top: 80px;"}

**Outline:**

::: {.column width="75%"}

1) [Reframing of ggplot internals as a data wrangling pipeline]{style="color:grey;"}

2) Walkthrough with a barplot example

3) Building up the boxplot annotation layer

:::

::::

## Walkthrough with a barplot {.nostretch}

```{r penguins-data}
#| eval: false
penguins_sm <- palmerpenguins::penguins %>% 
  select(species, bill_length_mm) %>% 
  filter(!is.na(bill_length_mm))
penguins_sm
```

```{r penguins-data-5row}
#| echo: false
penguins_sm <- palmerpenguins::penguins %>% 
  select(species, bill_length_mm) %>% 
  filter(!is.na(bill_length_mm))
penguins_sm %>% 
  print(n = 5)
```

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/culmen_depth.png){.absolute bottom=50 right=0 width="500px"}

```{r fmt-penguins-data}
#| echo: false
penguins_sm <- as.data.frame(penguins_sm)
```

## Walkthrough with a barplot

```{r barplot}
#| fig-align: "center"
#| out-width: "900px"
my_barplot <- ggplot(penguins_sm) + 
  geom_bar(aes(x = species, fill = species))
my_barplot
```

## It _always_ happens in steps

<div class="divbr"></div>

```{r bar-implicit}
#| eval: false
geom_bar(aes(x = species, fill = species))
```

. . .

<div class="divbr"></div>

```{r bar-explicit-geom-long}
#| eval: false
geom_bar(
  aes(
    x = species, fill = species,
    y = after_stat(count)
  ),
  stat = "count"
)
```


---

:::{style="position:relative;"}

```{r penguins-show}
#| eval: false
penguins_sm
```

```{r penguins-3row}
#| echo: false
penguins_sm %>% print(max = 6)
```

<div class="absolute internal-step" style="background-color:#BFBFBF; width:200px; right: 0px; top:0px; height:66px; line-height:66px">Input</div>

:::

. . .

:::{style="position:relative;"}

```{r layer_data-barplot}
ggplot2::layer_data(plot = my_barplot, i = 1L)
```

<div class="absolute internal-step" style="background-color:#BFBFBF; width:200px; right: 0px; top:0px; height:66px; line-height:66px">Output</div>

:::

---

```{r internal-steps-cards}
#| echo: false
#| results: "asis"
div(lapply(1:6, function(i) {
  div(
    class = c("absolute", "internal-step", if (i != 1) "fragment"),
    `data-fragment-index` = i - 1,
    style = css(
      top = paste0(90 * (i - 1), "px"),
      left = paste0(140 * (i - 1), "px"),
      backgroundColor =  c("#BFBFBF", "#FFB1C0", "#E4CB73", "#64DF91", "#E0B6FF", "#BFBFBF")[i],
      width = "350px", height = "250px", lineHeight = "250px", fontSize = "1.3em"
    ),
    c("Input", "Before Stat", "After Stat", "Before Geom", "After Scale", "Output")[i]
  )
}))
```

## 1) Before Stat

```{r bar-before-stat}
#| eval: false
ggtrace_inspect_args(
  x = my_barplot,
  method = ggplot2:::Layer$compute_statistic)$data
```

```{r bar-before-stat-3row}
#| echo: false
ggtrace_inspect_args(
  x = my_barplot,
  method = ggplot2:::Layer$compute_statistic)$data %>% 
  print(max = ncol(.) * 3)
```

```{r progress-before-stat}
#| echo: false
render_steps_progress(1)
```


## 1) Before Stat

```{r bar-before-stat-filtered}
#| eval: false
#| attr-source: 'data-hl-loc="[[5.8,5.2,23.2]]"'
ggtrace_inspect_args(
  x = ggplot(penguins_sm) +
        geom_bar(
          aes(x = species, fill = species),
          data = ~ .x %>% filter(species != "Adelie")
        ),
  method = ggplot2:::Layer$compute_statistic)$data
```

```{r bar-before-stat-filtered-3row}
#| echo: false
ggtrace_inspect_args(
  x = ggplot(penguins_sm) +
        geom_bar(
          aes(x = species, fill = species),
          data = ~ .x %>% filter(species != "Adelie")
        ),
  method = ggplot2:::Layer$compute_statistic)$data %>% 
  print(max = ncol(.) * 3)
```

```{r progress-before-stat}
#| echo: false
```

## 1) Before Stat

```{r bar-before-stat}
#| eval: false
```

```{r bar-before-stat-3row}
#| echo: false
```

```{r progress-before-stat}
#| echo: false
```

## 1) Before Stat

```{r bar-before-stat}
#| eval: false
```

```{r bar-before-stat-3row}
#| echo: false
```

:::{.absolute .imgbox}
![](img/stat_count-aes.png)
<img class="pkg-logo-modal" src="img/ggplot2_logo.png"/>
:::

::: {.aside}
From documentation: [https://ggplot2.tidyverse.org/reference/geom_bar](https://ggplot2.tidyverse.org/reference/geom_bar)
:::

```{r progress-before-stat}
#| echo: false
```

## 1) Before Stat

```{r bar-before-stat-overspec-error}
#| error: true
#| class-error: "big-chunk-output"
ggplot(penguins_sm) +
  geom_bar(aes(x = species, y = bill_length_mm))
```

```{r progress-before-stat}
#| echo: false
```

## 1) Before Stat

```{r bar-before-stat-overspec}
#| eval: false
#| attr-source: 'data-hl-loc="[[0,11.2,6.6]]"'
ggtrace_inspect_args(error = TRUE,
  x = ggplot(penguins_sm) +
        geom_bar(aes(x = species, y = bill_length_mm)),
  method = ggplot2:::Layer$compute_statistic)$data
```

```{r bar-before-stat-overspec-3row}
#| echo: false
ggtrace_inspect_args(error = TRUE,
  x = ggplot(penguins_sm) +
        geom_bar(aes(x = species, y = bill_length_mm)),
  method = ggplot2:::Layer$compute_statistic)$data %>% 
  print(max = ncol(.) * 3)
```

```{r progress-before-stat}
#| echo: false
```

## 2) After Stat

```{r bar-after-stat}
ggtrace_inspect_return(
  x = my_barplot,
  method = ggplot2:::Layer$compute_statistic)
```

```{r progress-after-stat}
#| echo: false
render_steps_progress(1:2)
```

## 2) After Stat

```{r bar-explicit-geom-short}
#| eval: false
geom_bar(aes(x = species, fill = species,
             y = after_stat(count)),
         stat = "count")
```

```{r progress-after-stat}
#| echo: false
```

## 2) After Stat

```{r bar-explicit-geom-short}
#| eval: false
#| attr-source: 'data-hl-loc="[[1.45,6.8,12]]"'
```

<div class="divbr"></div>

```{r bar-after_stat-post-mutate}
#| attr-source: 'data-hl-loc="[[4.4,4.8,5]]"'
ggtrace_inspect_return(
  x = my_barplot,
  method = ggplot2:::Layer$compute_statistic) %>% 
  mutate(y = count, .before = 1L)
```

```{r progress-after-stat}
#| echo: false
```

## 2) After Stat

```{r bar-aes-tidyeval}
#| eval: false
#| attr-source: 'data-hl-loc="[[1.45,6.8,18.4]]"'
geom_bar(aes(x = species, fill = species,
             y = after_stat( count/sum(count) )),
         stat = "count")
```

<div class="divbr"></div>

```{r bar-after_stat-tidyeval}
#| attr-source: 'data-hl-loc="[[4.4,4.8,10.8]]"'
ggtrace_inspect_return(
  x = my_barplot,
  method = ggplot2:::Layer$compute_statistic) %>% 
  mutate(y = count/sum(count), .before = 1L)
```

```{r progress-after-stat}
#| echo: false
```

## 2) After Stat

```{r bar-props}
#| fig-align: center
#| attr-source: 'data-hl-loc="[[2.9,7.8,18.4]]"'
ggplot(penguins_sm) +
  geom_bar(aes(x = species, fill = species,
               y = after_stat( count/sum(count) )),
           stat = "count")
```

```{r progress-after-stat}
#| echo: false
```

## 3) Before Geom

```{r bar-before-geom}
ggtrace_inspect_args(
  x = my_barplot,
  method = ggplot2:::Layer$compute_geom_1)$data
```

```{r progress-before-geom}
#| echo: false
render_steps_progress(1:3)
```

## 3) Before Geom

```{r bar-before-geom}
```

:::{.absolute .imgbox}
![](img/geom_bar-aes.png)
<img class="pkg-logo-modal" src="img/ggplot2_logo.png"/>
:::

::: {.aside}
From documentation: [https://ggplot2.tidyverse.org/reference/geom_bar](https://ggplot2.tidyverse.org/reference/geom_bar)
:::

```{r progress-before-geom}
#| echo: false
```

## 3) Before Geom

```{r bar-no-y}
#| attr-source: 'data-hl-loc="[[2.9,18,4.5]]"'
ggtrace_inspect_args(error = TRUE,
  x = ggplot(penguins_sm) +
        geom_bar(aes(x = species, y = NULL)),
  method = ggplot2:::Layer$compute_geom_1)$data
```

```{r progress-before-geom}
#| echo: false
```

## 3) Before Geom

```{r label-count-error}
#| error: true
#| class-error: "big-chunk-output"
ggplot(penguins_sm) +
  geom_label(aes(x = species, y = after_stat(count)),
             stat = "count")
```

```{r progress-before-geom}
#| echo: false
```

## 3) Before Geom

```{r label-count-after_stat}
#| fig-align: "center"
#| attr-source: 'data-hl-loc="[[2.9,11,13.6]]"'
ggplot(penguins_sm) +
  geom_label(aes(x = species, y = after_stat(count),
                 label = after_stat(count)),
             stat = "count", size = 5)
```

```{r progress-before-geom}
#| echo: false
```

## 3) Before Geom

```{r bar-label-count}
#| fig-align: "center"
ggplot(penguins_sm, aes(x = species)) +
  geom_bar() +
  geom_label(aes(y = after_stat(count),
                 label = after_stat(count)),
            stat = "count", size = 5)
```

```{r progress-before-geom}
#| echo: false
```

## 4) After Scale

```{r bar-after-scale}
ggtrace_inspect_return(
  x = my_barplot,
  method = ggplot2:::Layer$compute_geom_2)
```

```{r progress-after-scale}
#| echo: false
render_steps_progress(1:4)
```

## 4) After Scale {.nostretch}

```{r bar-after-scale-size-fill}
#| fig-align: "center"
#| out.width: "550px"
#| attr-source: 'data-hl-loc="[[4.4,8,20.9]]"'
library(colorspace) # for the `darken()` function
ggplot(penguins_sm) +
  geom_bar(aes(x = species, fill = species,
               color = after_scale( darken(fill, .5) )),
           size = 2)
```

::: aside
In `{ggplot2}` _v3.4.0_, `size` for lines will be renamed to `linewidth`
:::

```{r progress-after-scale}
#| echo: false
```

## 4) After Scale {.nostretch}

```{r bar-after-scale-size-fill}
#| fig-align: "center"
#| out.width: "550px"
#| attr-source: 'data-hl-loc="[[4.4,8,20.9]]"'
library(colorspace) # for the `darken()` function
ggplot(penguins_sm) +
  geom_bar(aes(x = species, fill = species,
               color = after_scale( darken(fill, .5) ),
               size = after_scale( size * 4 )))
```

::: aside
In `{ggplot2}` _v3.4.0_, `size` for lines will be renamed to `linewidth`
:::

```{r progress-after-scale}
#| echo: false
```

---

```{r barplot-lone}
#| echo: false
#| out-width: "700px"
#| fig-align: "center"
my_barplot
```

```{r bar-snapshots-gif}
#| fig-align: "center"
#| out-width: "80%"
#| out-extra: "style='box-shadow: 0px 0px 10px 5px grey'"
#| echo: false
knitr::include_graphics("img/bar-snapshots.gif")
```

```{r progress-after-scale}
#| echo: false
```

## Snapshots of `my_barplot`'s bar layer

**Input** (user-supplied data)

::: {style="margin-left: 50px;"}

1) [Before Stat]{.my-hl-1} [has `x`, allows `"count"` stat]{.fragment}

2) [After Stat]{.my-hl-2} [has `count`, allows `y = after_stat(count)`]{.fragment}

3) [Before Geom]{.my-hl-3} [has `x` and `y`, allows `"bar"` geom]{.fragment}

4) [After Scale]{.my-hl-4} [allows `after_scale()` mappings (_unused_)]{.fragment}

:::

**Output** (drawing-ready data)

## ggplot internals for users {.nostretch}

![](img/ggtrace_logo.png){.absolute width=450 right=-120}

:::: {.columns style="margin-top: 80px;"}

**Outline:**

::: {.column width="75%"}

1) [Reframing of ggplot internals as a data wrangling pipeline]{style="color:grey;"}

2) [Walkthrough with a barplot example]{style="color:grey;"}

3) Building up the boxplot annotation layer

:::

::::

## {.nostretch}

:::{.vcenter}
```{r my_boxplot-lone}
#| fig-align: "center"
```
:::

## {.nostretch}

:::{.vcenter}
<div>
```{r boxplot-annotation-skeleton}
#| eval: false
my_boxplot + ?
```

```{r my_boxplot-labelled}
#| echo: false
#| fig-align: "center"
```
</div>
:::

## Step-by-step

1) Use a `label` to draw a `boxplot` varible

. . .

```{r skeleton-geom-stat}
#| eval: false
#| code-line-numbers: true
geom_label(
  stat = "boxplot"
)
```

## Step-by-step

1) Use a `label` to draw a `boxplot` varible

```{r skeleton-geom-stat}
#| eval: false
#| code-line-numbers: true
```

<div class="divbr"></div>

```{r skeleton-stat-geom}
#| eval: false
#| code-line-numbers: true
stat_boxplot(
  geom = "label"
)
```

::: {.aside}
They're interchangeable - it's your choice!
:::

## Step-by-step

2) Plot just the responses from **condition B**

```{r skeleton-data}
#| eval: false
#| code-line-numbers: "3"
geom_label(
  stat = "boxplot",
  data = ~ .x %>% filter(condition == "B")
)
```

## Step-by-step

3) Give the `stat` the aesthetics it needs to start

```{r skeleton-start}
#| eval: false
#| code-line-numbers: "2-5"
geom_label(
  aes(
    x = condition,
    y = response_time
  ),
  stat = "boxplot",
  data = ~ .x %>% filter(condition == "B")
)
```

## Step-by-step

3) Make sure the `geom` gets the aesthetics it needs later

```{r skeleton-after-stat}
#| eval: false
#| code-line-numbers: "5"
geom_label(
  aes(
    x = condition,
    y = response_time,
    label = after_stat(ymax)
  ),
  stat = "boxplot",
  data = ~ .x %>% filter(condition == "B")
)
```

---

```{r no-stage}
my_boxplot_annotated <- my_boxplot +
  geom_label(
    aes(
      x = condition,
      y = response_time,
      label = after_stat(ymax)
    ),
    stat = "boxplot",
  data = ~ .x %>% filter(condition == "B")
  )
```

. . .

<div class="divbr"></div>

```{r no-stage-print}
#| eval: false
my_boxplot_annotated
```

```{r no-stage-print-build}
#| echo: false
#| error: true
#| class-error: "big-chunk-output"
ggplot_build(my_boxplot_annotated)
```

---

:::{.vcenter}

```{r annotation-before-geom}
#| attr-source: 'data-hl-loc="[[2.9,22.7,4.6]]"'
ggtrace_inspect_args(error = TRUE,
  x = my_boxplot_annotated,
  method = ggplot2:::Layer$compute_geom_1, cond = 2)$data
```

:::

## Multiple mappings with `stage()`

```{r stage-solution}
#| attr-source: 'data-hl-loc="[[5.8,3,27.5]]"'
my_boxplot_annotated <- my_boxplot +
  geom_label(
    aes(
      x = condition,
      y = stage(start = response_time, after_stat = ymax),
      label = after_stat(ymax)
    ),
    stat = "boxplot", size = 5,
    data = ~ .x %>% filter(condition == "B")
  )
```

---

::: {style="position:relative"}

```{r annotation-before-stat-success}
#| eval: false
ggtrace_inspect_args(
  x = my_boxplot_annotated,
  method = ggplot2:::Layer$compute_statistic, cond = 2)$data
```

```{r annotation-before-stat-success-3row}
#| echo: false
ggtrace_inspect_args(
  x = my_boxplot_annotated,
  method = ggplot2:::Layer$compute_statistic, cond = 2)$data %>% 
  print(max = ncol(.) * 3)
```

<div class="absolute internal-step" style="background-color:#FFB1C0; width:300px; right: 0px; top:0px; height:70px; line-height:70px;">Before Stat</div>

:::

. . .

::: {style="position:relative"}

```{r annotation-before-geom-success}
ggtrace_inspect_args(
  x = my_boxplot_annotated,
  method = ggplot2:::Layer$compute_geom_1, cond = 2)$data
```

<div class="absolute internal-step" style="background-color:#64DF91; width:300px; right: 0px; top:0px; height:70px; line-height:70px;">Before Geom</div>

:::

## {.nostretch}

:::{.vcenter}
```{r my-boxplot-annotated-plot}
#| fig-align: "center"
my_boxplot_annotated
```
:::

## Conclusion: ggplot internals for users

Layers have an underlying **dataframe representation**. The internals is **data wrangling** to make them **"drawing-ready"**.

. . .

<div class="divbr"></div>

Using `{ggtrace}` to crack open the internals, we saw:

. . .

1) Aesthetic mapping are like `mutate()` calls, scheduled to apply to the data at different `stage()`'s of the pipeline.

. . .

2) Every layer has a `stat` and a `geom` - they step in to modify the data, as long as the required columns are present.
